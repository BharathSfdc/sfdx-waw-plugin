const path = require('path');
const os = require('os');
const ScratchOrg = require(path.join(os.homedir(), '.local/share/heroku/plugins/node_modules/salesforce-alm/lib/scratchOrgApi'));
const forceUtils = require('../lib/forceUtils.js');
const crypto = require('crypto');
const fs = require('fs');

(function () {
  'use strict';

  module.exports = {
    topic: 'connectedapp',
    command: 'create',
    description: 'Create a connected app in your org',
    help: 'help text for wadewegner:connectedapp:create',
    flags: [{
        name: 'targetusername',
        char: 'u',
        description: 'username for the target org',
        hasValue: true,
        required: true
      },
      {
        name: 'connectedappname',
        char: 'n',
        description: 'connected app name',
        hasValue: true,
        required: true
      }
    ],
    run(context) {

      const targetUsername = context.flags.targetusername;
      const connectedAppName = context.flags.connectedappname;
      const generatedConsumerSecret = forceUtils.getConsumerSecret();
      const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

      forceUtils.getUsername(targetUsername, (username) => {

      var prime_length = 2048;
      var diffHell = crypto.createDiffieHellman(prime_length);
      diffHell.generateKeys('base64');
      const pubKey = diffHell.getPublicKey('base64');
      const privKey = diffHell.getPrivateKey('base64');

        fs.writeFile("server.key", privKey, function (err) {
          if (err) {
            return console.log(err);
          }

          console.log("The file was saved!");
        });

        ScratchOrg.create(username).then(org => {
          org.force._getConnection(org, org.config).then((conn) => {

            const metadata = [{
              contactEmail: username,
              description: 'generated by wadewegner:connectedapp:create',
              fullName: connectedAppName,
              label: connectedAppName,
              oauthConfig: {
                callbackUrl: 'sfdx://success',
                consumerSecret: generatedConsumerSecret,
                certificate: pubKey,
                scopes: [
                  'Basic',
                  'Api',
                  'Web',
                  'Full',
                  'RefreshToken'
                ]
              }
            }];

            conn.metadata.create('ConnectedApp', metadata, (createErr, results) => {
              if (results.success) {

                // console.log(conn.metadata);

                conn.metadata.read('ConnectedApp', connectedAppName, (readErr, metadataResult) => {
                  console.log(metadataResult); // eslint-disable-line no-console

                  // var records = [];
                  // conn.query(`SELECT Id FROM ConnectedApplication WHERE Name = '${connectedAppName}'`, function (err, result) {
                  //   if (err) {
                  //     return console.error(err);
                  //   }
                  //   // console.log(result.records[0].Id);

                  //   const id = result.records[0].Id;

                  //   conn.sobject("ConnectedApplication").update({ 
                  //     Id : id,
                  //     OptionsAllowAdminApprovedUsersOnly : true
                  //   }, function(err, ret) {
                  //     if (err || !ret.success) { return console.error(err, ret); }
                  //     console.log('Updated Successfully : ' + ret.id);
                  //     // ...
                  //   });
                  // });
                });
              } else {
                console.log(results); // eslint-disable-line no-console
              }
            });

          });
        });


        // org.setName(username);
        // org.refreshAuth()
        //   .then(() => org.force._getConnection(org, org.config).then((conn) => {


        //   }));
      });
    }
  };
}());