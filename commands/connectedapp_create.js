const path = require('path');
const os = require('os');
const ScratchOrg = require(path.join(os.homedir(), '.local/share/heroku/plugins/node_modules/salesforce-alm/lib/scratchOrgApi'));
const forceUtils = require('../lib/forceUtils.js');
const forge = require('node-forge');
const certs = require('../lib/certs.js');
const fs = require('fs');

(function () {
  'use strict';

  module.exports = {
    topic: 'connectedapp',
    command: 'create',
    description: 'Create a connected app in your org',
    help: 'help text for wadewegner:connectedapp:create',
    flags: [{
        name: 'targetusername',
        char: 'u',
        description: 'username or alias for the target org',
        hasValue: true,
        required: true
      },
      {
        name: 'name',
        char: 'n',
        description: 'connected app name',
        hasValue: true,
        required: true
      },
      {
        name: 'certificate',
        char: 'r',
        description: 'create and register a certificate',
        required: false,
        hasValue: false,
        type: 'flag'
      },
      {
        name: 'callbackurl',
        char: 'c',
        description: 'callbackUrl (default is "sfdx://success")',        
        hasValue: true,
        required: false
      },
      {
        name: 'description',
        char: 'd',
        description: 'connected app description',
        hasValue: true,
        required: false
      },
      {
        // Basic,Api,Web,Full,Chatter,CustomApplications,RefreshToken,OpenID,CustomPermissions,Wave,Eclair
        name: 'scopes',
        char: 's',
        description: 'scopes separated by commas (defaut: Basic, Api, Web, Refresh; valid: Basic, Api, Web, Full, Chatter, CustomApplications, RefreshToken, OpenID, CustomPermissions, Wave, Eclair)',
        hasValue: true,
        required: false
      }
    ],
    run(context) {

      const targetUsername = context.flags.targetusername;
      const connectedAppName = context.flags.name;
      let callbackurl = context.flags.callbackurl;
      if (!callbackurl) {
        callbackurl = 'sfdx://success';
      }
      const createCerts = context.flags.certificate;
      let description = context.flags.description;
      if (!description) {
        description = 'generated by wadewegner:connectedapp:create';
      }
      let origScopes = context.flags.scopes;
      let scopes = [];
      if (origScopes) {
        scopes = origScopes.split(',');
      } else {
        scopes = [ 'Basic', 'Api', 'Web'];
      }

      const generatedConsumerSecret = forceUtils.getConsumerSecret();
      const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

      forceUtils.getUsername(targetUsername, (username) => {

        var pki = forge.pki;
        var keys = pki.rsa.generateKeyPair(2048);
        var privKey = forge.pki.privateKeyToPem(keys.privateKey);

        certs.getSelfSignedCertificate(pki, keys, (cert) => {

          if (createCerts) {
            var pubKey = pki.certificateToPem(cert);

            fs.writeFile("server.key", privKey, function (err) {
              if (err) {
                return console.log(err);
              }
            });

            fs.writeFile("server.crt", pubKey, function (err) {
              if (err) {
                return console.log(err);
              }
            });
          };

          ScratchOrg.create(username).then(org => {
            org.force._getConnection(org, org.config).then((conn) => {

              let metadata;

              if (createCerts) {
                metadata = [{
                  contactEmail: username,
                  description: description,
                  fullName: connectedAppName,
                  label: connectedAppName,
                  oauthConfig: {
                    callbackUrl: callbackurl,
                    consumerSecret: generatedConsumerSecret,
                    certificate: pubKey,
                    scopes: scopes
                  }
                }];
              } else {
                metadata = [{
                  contactEmail: username,
                  description: description,
                  fullName: connectedAppName,
                  label: connectedAppName,
                  oauthConfig: {
                    callbackUrl: callbackurl,
                    consumerSecret: generatedConsumerSecret,
                    scopes: scopes
                  }
                }];
              }

              conn.metadata.create('ConnectedApp', metadata, (createErr, results) => {
                if (results.success) {
                  conn.metadata.read('ConnectedApp', connectedAppName, (readErr, metadataResult) => {
                    console.log(metadataResult); // eslint-disable-line no-console
                  });
                } else {
                  console.log(results); // eslint-disable-line no-console
                }
              });
            });
          });

        });

      });
    }
  };
}());