const path = require('path');
const os = require('os');
const ScratchOrg = require(path.join(os.homedir(), '.local/share/heroku/plugins/node_modules/salesforce-alm/lib/scratchOrgApi'));
const forceUtils = require('../lib/forceUtils.js');

(function () {
  'use strict';

  module.exports = {
    topic: 'connectedapp',
    command: 'create',
    description: 'Create a connected app in your org',
    help: 'help text for wadewegner:connectedapp:create',
    flags: [{
        name: 'targetusername',
        char: 'u',
        description: 'username for the target org',
        hasValue: true,
        required: true
      },
      {
        name: 'connectedappname',
        char: 'n',
        description: 'connected app name',
        hasValue: true,
        required: true
      }
    ],
    run(context) {

      const targetUsername = context.flags.targetusername;
      const connectedAppName = context.flags.connectedappname;
      const generatedConsumerSecret = forceUtils.getConsumerSecret();
      const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

      forceUtils.getUsername(targetUsername, (username) => {

        const org = new ScratchOrg();

        org.setName(username);
        org.refreshAuth()
          .then(() => org.force._getConnection(org, org.config).then((conn) => {

            const metadata = [{
              contactEmail: username,
              description: 'generated by wadewegner:connectedapp:create',
              fullName: connectedAppName,
              label: connectedAppName,
              oauthConfig: {
                callbackUrl: 'sfdx://success',
                consumerSecret: generatedConsumerSecret,
                scopes: [
                  'Basic',
                  'Api',
                  'Web',
                  'Full',
                  'RefreshToken'
                ]
              }
            }];

            conn.metadata.create('ConnectedApp', metadata, (createErr, results) => {
              if (results.success) {
                conn.metadata.read('ConnectedApp', connectedAppName, (readErr, metadataResult) => {
                  console.log(metadataResult); // eslint-disable-line no-console
                });
              } else {
                console.log(results); // eslint-disable-line no-console
              }
            });
          }));
      });
    }
  };
}());