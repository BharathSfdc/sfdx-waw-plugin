const path = require('path');
const os = require('os');
const alm = require('salesforce-alm');
const ScratchOrg = require(path.join(os.homedir(), '.local/share/heroku/plugins/node_modules/salesforce-alm/lib/scratchOrgApi'));

(function () {
  'use strict';

  module.exports = {
    topic: 'connectedapp',
    command: 'create',
    description: 'Create a connected app in your org',
    help: 'help text for wadewegner:connectedapp:create',
    flags: [{
        name: 'targetusername',
        char: 'u',
        description: 'username for the target org',
        hasValue: true,
        required: true
      },
      {
        name: 'connectedappname',
        char: 'n',
        description: 'connected app name',
        hasValue: true,
        required: true
      }
    ],
    run(context) {

      const targetUsername = context.flags.targetusername;
      const connectedAppName = context.flags.connectedappname;
      let generatedConsumerSecret = '';
      const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

      for (let i=0; i < 9; i++ ) {
          generatedConsumerSecret += possible.charAt(Math.floor(Math.random() * possible.length));
      }

      alm.orgApi.list().then((data) => {
        data.forEach((orgData) => {

          if (orgData.username === targetUsername || orgData.alias === targetUsername) {

            const username = orgData.username;
            
            const org = new ScratchOrg();
            org.setName(username);

            org.refreshAuth()
              .then(() => org.force._getConnection(org, org.config).then((conn) => {

                const metadata = [{
                  contactEmail: username,
                  description: 'generated by wadewegner:connectedapp:create',
                  fullName: connectedAppName,
                  label: connectedAppName,
                  oauthConfig: {
                    callbackUrl: 'sfdx://success',
                    consumerSecret: generatedConsumerSecret,
                    scopes: [
                      'Basic',
                      'Api',
                      'Web',
                      'Full',
                      'RefreshToken'
                    ]
                  }
                }];

                conn.metadata.create('ConnectedApp', metadata, (createErr, results) => {
                  if (results.success) {
                    conn.metadata.read('ConnectedApp', connectedAppName, (readErr, metadataResult) => {
                      console.log(metadataResult);
                    });
                  } else {
                    console.log(results);
                  }
                });
              }));

          }
        });
      });








    }
  };
}());